import numpy as np
import scipy as sp
from matplotlib import pyplot as plt

def generate_uniform(beta: float = 1203248318, shape: tuple = (100,)):
    M = 2 ** 31 - 1
    a = 1
    n = np.prod(shape)
    random_value = np.empty(n)
    for i in range(n):
        a = (beta * a) % M
        random_value[i] = a / M
    return random_value.reshape(*shape)

sampling_sizes = [30, 50, 100, 300, 500, 1000]

seqs = []
means = []
stds = []

gt_seqs = []
gt_means = []
gt_stds = []

for sampling_size in sampling_sizes:
    generated = generate_uniform(shape=(sampling_size,))
    gt_seqs.append(np.random.uniform(size=sampling_size))
    seqs.append(generated)
    means.append(seqs[-1].mean())
    stds.append(seqs[-1].std())
    gt_means.append(gt_seqs[-1].mean())
    gt_stds.append(gt_seqs[-1].std())
    print(f'Mean for {sampling_size} values: {means[-1]}')
    print(f'Std for {sampling_size} values: {stds[-1]}')
    
means = np.array(means)
stds = np.array(means)
gt_means = np.array(gt_means)
gt_stds = np.array(gt_stds)

def autocov(seq: np.ndarray, offset: int):
    if offset == 0:
        return np.mean(seq ** 2)
    return np.mean(seq[:-offset] * seq[offset:])

def plot_conv_comparison(means, gt_means):
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 5))
    ax1.plot(sampling_sizes, np.abs(means - 0.5))
    ax2.plot(sampling_sizes, np.abs(gt_means - 0.5))
    ax1.set_xlabel('# samples')
    ax1.set_ylabel('Divergence from mean')
    ax1.set_title('Mean convergence plot of MCM')
    ax2.set_xlabel('# samples')
    ax2.set_ylabel('Divergence from mean')
    ax2.set_title('Mean convergence plot of gt')
    plt.show()
    
plot_conv_comparison(means, gt_means)

def plot_autocov_comparison(seq, gt_seq):
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 5))
    ax1.plot([autocov(seq, k) for k in range(51)])
    ax2.plot([autocov(gt_seq, k) for k in range(51)])
    ax1.set_xlabel('Offset')
    ax1.set_ylabel('Autocovariance')
    ax1.set_title('Autocovariance function for MCM')
    ax2.set_xlabel('Offset')
    ax2.set_ylabel('Autocovariance')
    ax2.set_title('Autocovariance function for gt')
    plt.show()
    
plot_autocov_comparison(seqs[-1], gt_seqs[-1])

def plot_scatter_comparison(seq, gt_seq):
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 5))
    ax1.scatter(seq[::2], seq[1::2])
    ax2.scatter(gt_seq[::2], gt_seq[1::2])
    ax1.set_ylabel('Elements with even indices')
    ax1.set_xlabel('Elements with odd indices')
    ax1.set_title('Sequence scatter plot for MCM')
    ax2.set_ylabel('Elements with even indices')
    ax2.set_xlabel('Elements with odd indices')
    ax2.set_title('Sequence scatter plot for gt')
    plt.show()
    
plot_scatter_comparison(seqs[3], gt_seqs[3])

def plot_hist_comparison(seq, gt_seq, bins: int = 16):
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 5))
    ax1.hist(seq, bins=bins)
    ax2.hist(gt_seq, bins=bins)
    ax1.set_xlabel('Value')
    ax1.set_ylabel('Occurences')
    ax1.set_title('Distribution histogram for MCM')
    ax2.set_xlabel('Value')
    ax2.set_ylabel('Occurences')
    ax2.set_title('Distribution histogram for gt')
    plt.show()
    
plot_hist_comparison(seqs[3], gt_seqs[3])

from scipy import stats

def chi2(seq, dist_func, low: float = 0, high: float = 1, k: int = 5):
    bins = np.linspace(low, high, k + 1)
    dist = np.array([dist_func(value) for value in bins])
    dist = dist[1:] - dist[:-1]
    hist = plt.hist(seq, bins=bins)[0]
    return seq.size * np.sum((hist / seq.size - dist) ** 2 / dist)

def find_chi2_p_value(chi2: float, r: int = 4):
    return 1 - stats.chi2.cdf(chi2, r)

n_bins_chi2 = 5
EPS = 0.05

for i in range(len(seqs)):
    seq = seqs[i]
    p_value = find_chi2_p_value(xi_square(seq, lambda x: x, k=n_bins_chi2), r=n_bins_chi2-1)
    gt_p_value = find_chi2_p_value(xi_square(gt_seqs[i], lambda x: x, k=n_bins_chi2), r=n_bins_chi2-1)
    print(f'P-value for MCM with {seq.size} elements: {p_value}')
    print(f'P-value for gt with {seq.size} elements: {gt_p_value}')
    print(f'Null-hypothesis (uniformly distributed) is correct: {p_value > EPS}')
    print()


